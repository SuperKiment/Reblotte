import {
  Client,
  GatewayIntentBits,
  REST,
  Routes,
  SlashCommandBuilder,
  PermissionFlagsBits,
} from "discord.js";
import dotenv from "dotenv";
import fs from "fs/promises";
import path from "path";

dotenv.config();

const TOKEN = process.env.BOT_TOKEN;
const CLIENT_ID = process.env.CLIENT_ID;
const KICK_DELAY_MS = parseInt(process.env.KICK_DELAY_MS) || 1000;

const client = new Client({
  intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMembers],
});

// --- Utilitaires de debug ---
function debugLog(message, data = null) {
  console.log(`[DEBUG] ${message}`);
  if (data) console.log(JSON.stringify(data, null, 2));
}

const extractRoleId = (input) => input?.match(/\d{17,19}/)?.[0] || null;
const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// --- Fonction de debug pour analyser les r√¥les ---
async function debugRoleAnalysis(guild, roleInput) {
  debugLog("=== ANALYSE COMPL√àTE DU R√îLE ===");
  
  // 1. Informations sur l'input
  debugLog("Input re√ßu:", {
    type: typeof roleInput,
    value: roleInput,
    id: roleInput?.id,
    name: roleInput?.name
  });

  // 2. √âtat du cache des r√¥les
  debugLog(`Cache des r√¥les: ${guild.roles.cache.size} r√¥les en cache`);
  
  // 3. Chercher le r√¥le dans le cache
  const roleFromCache = guild.roles.cache.get(roleInput?.id);
  debugLog("R√¥le trouv√© dans le cache:", !!roleFromCache);
  
  if (roleFromCache) {
    debugLog("D√©tails du r√¥le (cache):", {
      id: roleFromCache.id,
      name: roleFromCache.name,
      members_count: roleFromCache.members?.size || 0,
      position: roleFromCache.position,
      color: roleFromCache.hexColor
    });
  }

  // 4. Forcer le fetch du r√¥le
  debugLog("Tentative de fetch forc√© du r√¥le...");
  try {
    const fetchedRole = await guild.roles.fetch(roleInput.id, { force: true });
    debugLog("R√¥le fetch√©s avec succ√®s:", {
      id: fetchedRole.id,
      name: fetchedRole.name,
      members_count: fetchedRole.members?.size || 0
    });
  } catch (error) {
    debugLog("Erreur lors du fetch du r√¥le:", error.message);
  }

  // 5. V√©rifier l'√©tat du cache des membres
  debugLog(`Cache des membres: ${guild.members.cache.size} membres en cache`);
  debugLog(`Total membres du serveur: ${guild.memberCount}`);

  // 6. Analyser les membres avec ce r√¥le (m√©thode 1: via le cache)
  const membersWithRoleCache = guild.members.cache.filter(m => m.roles.cache.has(roleInput.id));
  debugLog(`Membres avec le r√¥le (cache): ${membersWithRoleCache.size}`);

  // 7. Si le cache est vide, forcer le fetch des membres
  if (guild.members.cache.size < guild.memberCount * 0.1) { // Si moins de 10% en cache
    debugLog("Cache des membres insuffisant, tentative de fetch...");
    try {
      await guild.members.fetch({ limit: 1000 });
      debugLog(`Apr√®s fetch partiel: ${guild.members.cache.size} membres en cache`);
      
      const membersAfterFetch = guild.members.cache.filter(m => m.roles.cache.has(roleInput.id));
      debugLog(`Membres avec le r√¥le (apr√®s fetch partiel): ${membersAfterFetch.size}`);
    } catch (error) {
      debugLog("Erreur lors du fetch des membres:", error.message);
    }
  }

  return roleFromCache || guild.roles.cache.get(roleInput.id);
}

// --- Gestion des membres (version debug) ---
async function fetchMembersWithRoleDebug(guild, roleId) {
  debugLog("=== R√âCUP√âRATION DES MEMBRES AVEC R√îLE ===");
  debugLog(`Guild: ${guild.name} (${guild.id})`);
  debugLog(`Role ID recherch√©: ${roleId}`);

  // M√©thode 1: Chercher directement dans le cache
  let role = guild.roles.cache.get(roleId);
  debugLog(`R√¥le trouv√© dans cache: ${!!role}`);
  
  if (!role) {
    debugLog("R√¥le non trouv√© dans cache, fetch forc√©...");
    try {
      await guild.roles.fetch();
      role = guild.roles.cache.get(roleId);
      debugLog(`R√¥le trouv√© apr√®s fetch: ${!!role}`);
    } catch (error) {
      debugLog("Erreur fetch r√¥les:", error.message);
      return { role: null, members: new Map(), debug: "Erreur fetch r√¥les" };
    }
  }

  if (!role) {
    return { role: null, members: new Map(), debug: "R√¥le introuvable apr√®s tous les essais" };
  }

  debugLog("D√©tails du r√¥le trouv√©:", {
    id: role.id,
    name: role.name,
    members_from_role: role.members?.size || 0,
    position: role.position
  });

  // M√©thode 2: Via role.members (le plus direct)
  if (role.members && role.members.size > 0) {
    debugLog(`‚úÖ M√©thode role.members r√©ussie: ${role.members.size} membres`);
    return { role, members: role.members, debug: `role.members: ${role.members.size}` };
  }

  // M√©thode 3: Filtrer le cache des membres
  debugLog("role.members vide, essai via cache des membres...");
  debugLog(`Cache membres actuel: ${guild.members.cache.size}/${guild.memberCount}`);

  let membersWithRole = guild.members.cache.filter(m => m.roles.cache.has(roleId));
  debugLog(`Membres trouv√©s dans cache: ${membersWithRole.size}`);

  // M√©thode 4: Si diff√©rence importante, forcer fetch complet
  if (guild.members.cache.size < guild.memberCount * 0.8) {
    debugLog("Cache insuffisant pour analyse compl√®te, fetch TOUS les membres...");
    await interaction.editReply("üîÑ Cache incomplet d√©tect√©, chargement de tous les membres... (peut prendre 1-2 minutes)");
    
    try {
      // Fetch PROGRESSIF pour √©viter les timeouts
      const allMembers = await guild.members.fetch({ 
        limit: 0,  // 0 = pas de limite = TOUS
        force: true 
      });
      debugLog(`‚úÖ Fetch complet r√©ussi: ${allMembers.size} membres charg√©s`);
      
      // Re-filter avec le cache complet
      membersWithRole = guild.members.cache.filter(m => m.roles.cache.has(roleId));
      debugLog(`‚úÖ Membres avec r√¥le apr√®s fetch complet: ${membersWithRole.size}`);
      
      // Mettre √† jour role.members aussi
      if (role && role.members) {
        debugLog(`‚úÖ role.members apr√®s refresh: ${role.members.size}`);
      }
      
    } catch (error) {
      debugLog("‚ùå Erreur lors du fetch complet:", error.message);
      // Continuer avec le cache partiel
    }
  }

  return { 
    role, 
    members: membersWithRole,
    debug: `Final: ${membersWithRole.size} membres trouv√©s`
  };
}

async function processKicks(members, reason, progressCallback) {
  const results = { success: 0, failed: 0, errors: [] };
  const total = members.size;
  let processed = 0;

  for (const [id, member] of members) {
    processed++;
    
    try {
      if (!member.kickable) {
        results.failed++;
        results.errors.push(`${member.user.tag}: Non expulsable`);
      } else {
        await member.kick(reason);
        results.success++;
      }
    } catch (error) {
      results.failed++;
      results.errors.push(`${member.user.tag}: ${error.message}`);
    }
    
    if (processed % 10 === 0 || processed === total) {
      await progressCallback?.(processed, total, results);
    }
    
    await sleep(KICK_DELAY_MS);
  }
  
  return results;
}

async function generateReport(members, roleId, type = "preview") {
  const lines = [`=== RAPPORT ${type.toUpperCase()} ===`];
  lines.push(`R√¥le ID: ${roleId}`);
  lines.push(`Nombre de membres: ${members.size}`);
  lines.push(`Date: ${new Date().toLocaleString('fr-FR')}`);
  lines.push('');
  
  for (const [id, member] of members) {
    const kickable = member.kickable ? '‚úÖ' : '‚ùå';
    lines.push(`${kickable} ${member.user.tag} (${id})`);
  }
  
  const filename = `${type}_${roleId}_${Date.now()}.txt`;
  const filepath = path.join(process.cwd(), filename);
  
  await fs.writeFile(filepath, lines.join('\n'), 'utf8');
  return { filepath, filename };
}

// --- Commandes avec debug ---
const commands = [
  new SlashCommandBuilder()
    .setName("kickrole")
    .setDescription("üö™ Expulse tous les membres ayant un r√¥le sp√©cifique")
    .setDefaultMemberPermissions(PermissionFlagsBits.KickMembers)
    .addRoleOption(option =>
      option.setName("role")
        .setDescription("Le r√¥le √† cibler")
        .setRequired(true)
    )
    .addStringOption(option =>
      option.setName("reason")
        .setDescription("Raison de l'expulsion")
        .setRequired(false)
    ),
    
  new SlashCommandBuilder()
    .setName("previewrole")
    .setDescription("üëÄ Aper√ßu des membres qui seraient expuls√©s")
    .setDefaultMemberPermissions(PermissionFlagsBits.KickMembers)
    .addRoleOption(option =>
      option.setName("role")
        .setDescription("Le r√¥le √† analyser")
        .setRequired(true)
    ),

  // NOUVELLE COMMANDE DE DEBUG
  new SlashCommandBuilder()
    .setName("debugrole")
    .setDescription("üîç Debug complet d'un r√¥le")
    .setDefaultMemberPermissions(PermissionFlagsBits.KickMembers)
    .addRoleOption(option =>
      option.setName("role")
        .setDescription("Le r√¥le √† analyser en d√©tail")
        .setRequired(true)
    )
].map(cmd => cmd.toJSON());

// --- Gestionnaire d'interactions avec debug ---
client.on("interactionCreate", async (interaction) => {
  if (!interaction.isChatInputCommand()) return;

  await interaction.deferReply();
  
  const { commandName: cmd } = interaction;
  const role = interaction.options.getRole("role");
  const customReason = interaction.options.getString("reason");
  
  debugLog(`Commande re√ßue: ${cmd}`);
  debugLog("R√¥le re√ßu:", {
    id: role?.id,
    name: role?.name,
    type: typeof role
  });

  if (!role) {
    debugLog("‚ùå R√¥le invalide re√ßu");
    return interaction.editReply("‚ùå R√¥le invalide ou introuvable.");
  }

  try {
    // NOUVELLE COMMANDE DEBUG
    if (cmd === "debugrole") {
      await interaction.editReply("üîç **ANALYSE DEBUG EN COURS...**\nConsultez la console pour les d√©tails.");
      
      const analysisRole = await debugRoleAnalysis(interaction.guild, role);
      const { role: finalRole, members, debug } = await fetchMembersWithRoleDebug(interaction.guild, role.id);
      
      const debugInfo = [
        `üîç **RAPPORT DEBUG COMPLET**`,
        ``,
        `**Serveur:** ${interaction.guild.name}`,
        `**R√¥le:** ${role.name} (${role.id})`,
        `**Cache membres:** ${interaction.guild.members.cache.size}/${interaction.guild.memberCount}`,
        `**Cache r√¥les:** ${interaction.guild.roles.cache.size}`,
        ``,
        `**R√©sultat final:**`,
        `- R√¥le trouv√©: ${!!finalRole}`,
        `- Membres d√©tect√©s: ${members?.size || 0}`,
        `- Debug info: ${debug}`,
        ``,
        `üìä Voir la console pour les d√©tails complets.`
      ];
      
      await interaction.editReply(debugInfo.join('\n'));
      return;
    }

    await interaction.editReply(`üîç Analyse du r√¥le **${role.name}**...`);
    
    const { role: finalRole, members, debug } = await fetchMembersWithRoleDebug(interaction.guild, role.id);
    
    debugLog(`R√©sultat final de fetchMembersWithRoleDebug:`, {
      roleFound: !!finalRole,
      membersCount: members?.size || 0,
      debug
    });
    
    if (!finalRole) {
      return interaction.editReply(`‚ùå R√¥le **${role.name}** introuvable apr√®s analyse compl√®te.\n\nDebug: ${debug}`);
    }

    if (!members || members.size === 0) {
      return interaction.editReply(`‚úÖ Aucun membre n'a le r√¥le **${role.name}**.\n\nDebug: ${debug}\n\nüîç Utilisez \`/debugrole\` pour une analyse compl√®te.`);
    }

    const kickableCount = members.filter(m => m.kickable).size;
    const nonKickableCount = members.size - kickableCount;

    if (cmd === "previewrole") {
      await interaction.editReply(`üìä **Analyse termin√©e**\n\n**R√¥le:** ${role.name}\n**Total:** ${members.size} membres\n**Expulsables:** ${kickableCount}\n**Non-expulsables:** ${nonKickableCount}\n**Debug:** ${debug}\n\nüìÑ G√©n√©ration du rapport...`);
      
      const { filepath, filename } = await generateReport(members, role.id);
      
      await interaction.followUp({
        content: "üìã **Rapport d'analyse**",
        files: [{ attachment: filepath, name: filename }]
      });
      
      await fs.unlink(filepath);
    }
    
    else if (cmd === "kickrole") {
      if (kickableCount === 0) {
        return interaction.editReply(`‚ö†Ô∏è Aucun membre expulsable trouv√©.\n\nDebug: ${debug}`);
      }
      
      const reason = customReason || `Expulsion automatique - R√¥le: ${role.name}`;
      
      await interaction.editReply(`‚ö†Ô∏è **D√âMARRAGE DE L'EXPULSION**\n\n**Cible:** ${kickableCount} membres\n**R√¥le:** ${role.name}\n**D√©lai:** ${KICK_DELAY_MS}ms entre chaque kick\n\nüöÄ Traitement en cours...`);
      
      let lastUpdate = Date.now();
      const results = await processKicks(members, reason, async (processed, total, results) => {
        if (Date.now() - lastUpdate > 5000) {
          await interaction.editReply(`‚è≥ **Progression: ${processed}/${total}**\n‚úÖ R√©ussis: ${results.success}\n‚ùå √âchecs: ${results.failed}`);
          lastUpdate = Date.now();
        }
      });
      
      await interaction.editReply(`üèÅ **EXPULSION TERMIN√âE**\n\n‚úÖ **R√©ussis:** ${results.success}\n‚ùå **√âchecs:** ${results.failed}\n‚è±Ô∏è **Dur√©e:** ${Math.round((results.success + results.failed) * KICK_DELAY_MS / 1000)}s`);
      
      if (results.errors.length > 0) {
        const errorFile = `errors_${role.id}_${Date.now()}.txt`;
        await fs.writeFile(errorFile, results.errors.join('\n'), 'utf8');
        
        await interaction.followUp({
          content: `‚ö†Ô∏è **Rapport d'erreurs** (${results.errors.length})`,
          files: [{ attachment: errorFile }]
        });
      }
    }
    
  } catch (error) {
    console.error(`[ERREUR] ${cmd}:`, error);
    await interaction.editReply(`‚ùå **Erreur critique**\n\`\`\`${error.message}\`\`\``);
  }
});

// --- Initialisation ---
client.once("ready", async () => {
  console.log(`ü§ñ Bot connect√©: ${client.user.tag}`);
  debugLog(`Intents activ√©s: ${Object.keys(GatewayIntentBits).filter(key => client.options.intents.has(GatewayIntentBits[key]))}`);
  
  const rest = new REST({ version: "10" }).setToken(TOKEN);
  
  for (const [guildId, guild] of client.guilds.cache) {
    try {
      await rest.put(Routes.applicationGuildCommands(CLIENT_ID, guildId), { body: commands });
      console.log(`‚úÖ Commandes install√©es: ${guild.name}`);
      
      debugLog(`Guild ${guild.name}:`, {
        memberCount: guild.memberCount,
        rolesCount: guild.roles.cache.size,
        membersInCache: guild.members.cache.size
      });
    } catch (error) {
      console.error(`‚ùå Erreur installation ${guild.name}:`, error.message);
    }
  }
  
  console.log(`üöÄ Bot op√©rationnel sur ${client.guilds.cache.size} serveur(s)`);
});

process.on('unhandledRejection', (error) => {
  console.error('‚ùå Erreur non g√©r√©e:', error);
});

client.login(TOKEN);